- hosts: master
  become: yes
  vars:
    kube_version: 1.11.3
  tasks:
    - name: initialize the cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version v{{ kube_version }} >> cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - name: create .kube directory
      become: yes
      become_user: centos
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/centos/.kube/config
        remote_src: yes
        owner: centos

    - name: install Pod network
      become: yes
      become_user: centos
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml >> pod_network_setup.txt
      args:
        chdir: $HOME
        creates: pod_network_setup.txt

    - name: Create file with storage provisioner k8s objects
      copy:
        dest: /etc/kubernetes/storage_provisioner.yml
        content: |
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: storage-provisioner
            namespace: kube-system
            labels:
              addonmanager.kubernetes.io/mode: Reconcile

          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: storage-provisioner
            labels:
              addonmanager.kubernetes.io/mode: EnsureExists
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:persistent-volume-provisioner
          subjects:
            - kind: ServiceAccount
              name: storage-provisioner
              namespace: kube-system

          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: storage-provisioner
            namespace: kube-system
            labels:
              integration-test: storage-provisioner
              addonmanager.kubernetes.io/mode: Reconcile
          spec:
            serviceAccountName: storage-provisioner
            hostNetwork: true
            containers:
            - name: storage-provisioner
              image: gcr.io/k8s-minikube/storage-provisioner:v1.8.1
              command: ["/storage-provisioner"]
              imagePullPolicy: IfNotPresent
              volumeMounts:
              - mountPath: /tmp
                name: tmp
            volumes:
            - name: tmp
              hostPath:
                path: /tmp
                type: Directory
          ---
          kind: StorageClass
          apiVersion: storage.k8s.io/v1
          metadata:
            namespace: kube-system
            name: standard
            annotations:
              storageclass.beta.kubernetes.io/is-default-class: "true"
            labels:
              addonmanager.kubernetes.io/mode: Reconcile

          provisioner: k8s.io/minikube-hostpath

    - name: Install Storage provisioner
      become: yes
      become_user: centos
      shell: kubectl apply -f /etc/kubernetes/storage_provisioner.yml > storage_provisioner.txt
      args:
        chdir: $HOME
        creates: storage_provisioner.txt

    - name: Create file with storage provisioner k8s objects
      copy:
        dest: /etc/kubernetes/nginx-ingress.yml
        content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ingress-nginx
          ---
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: default-http-backend
            labels:
              app.kubernetes.io/name: default-http-backend
              app.kubernetes.io/part-of: ingress-nginx
            namespace: ingress-nginx
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/name: default-http-backend
                app.kubernetes.io/part-of: ingress-nginx
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: default-http-backend
                  app.kubernetes.io/part-of: ingress-nginx
              spec:
                terminationGracePeriodSeconds: 60
                containers:
                  - name: default-http-backend
                    # Any image is permissible as long as:
                    # 1. It serves a 404 page at /
                    # 2. It serves 200 on a /healthz endpoint
                    image: k8s.gcr.io/defaultbackend-amd64:1.5
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8080
                        scheme: HTTP
                      initialDelaySeconds: 30
                      timeoutSeconds: 5
                    ports:
                      - containerPort: 8080
                    resources:
                      limits:
                        cpu: 10m
                        memory: 20Mi
                      requests:
                        cpu: 10m
                        memory: 20Mi

          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: default-http-backend
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: default-http-backend
              app.kubernetes.io/part-of: ingress-nginx
          spec:
            ports:
              - port: 80
                targetPort: 8080
            selector:
              app.kubernetes.io/name: default-http-backend
              app.kubernetes.io/part-of: ingress-nginx

          ---

          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: nginx-configuration
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx

          ---

          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: tcp-services
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx

          ---

          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: udp-services
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx

          ---

          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: nginx-ingress-serviceaccount
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx

          ---
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRole
          metadata:
            name: nginx-ingress-clusterrole
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
          rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
                - endpoints
                - nodes
                - pods
                - secrets
              verbs:
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - nodes
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - services
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - "extensions"
              resources:
                - ingresses
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
            - apiGroups:
                - "extensions"
              resources:
                - ingresses/status
              verbs:
                - update

          ---
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: Role
          metadata:
            name: nginx-ingress-role
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
          rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
                - pods
                - secrets
                - namespaces
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - configmaps
              resourceNames:
                # Defaults to "<election-id>-<ingress-class>"
                # Here: "<ingress-controller-leader>-<nginx>"
                # This has to be adapted if you change either parameter
                # when launching the nginx-ingress-controller.
                - "ingress-controller-leader-nginx"
              verbs:
                - get
                - update
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - create
            - apiGroups:
                - ""
              resources:
                - endpoints
              verbs:
                - get

          ---
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: RoleBinding
          metadata:
            name: nginx-ingress-role-nisa-binding
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: nginx-ingress-role
          subjects:
            - kind: ServiceAccount
              name: nginx-ingress-serviceaccount
              namespace: ingress-nginx

          ---
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
            name: nginx-ingress-clusterrole-nisa-binding
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: nginx-ingress-clusterrole
          subjects:
            - kind: ServiceAccount
              name: nginx-ingress-serviceaccount
              namespace: ingress-nginx

          ---

          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: nginx-ingress-controller
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: ingress-nginx
                  app.kubernetes.io/part-of: ingress-nginx
                annotations:
                  prometheus.io/port: "10254"
                  prometheus.io/scrape: "true"
              spec:
                serviceAccountName: nginx-ingress-serviceaccount
                containers:
                  - name: nginx-ingress-controller
                    image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.19.0
                    args:
                      - /nginx-ingress-controller
                      - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
                      - --configmap=$(POD_NAMESPACE)/nginx-configuration
                      - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
                      - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
                      - --publish-service=$(POD_NAMESPACE)/ingress-nginx
                      - --annotations-prefix=nginx.ingress.kubernetes.io
                    securityContext:
                      capabilities:
                        drop:
                          - ALL
                        add:
                          - NET_BIND_SERVICE
                      # www-data -> 33
                      runAsUser: 33
                    env:
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: POD_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                    ports:
                      - name: http
                        containerPort: 80
                      - name: https
                        containerPort: 443
                    livenessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /healthz
                        port: 10254
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /healthz
                        port: 10254
                        scheme: HTTP
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1

          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ingress-nginx
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
          spec:
            type: NodePort
            ports:
              - name: http
                port: 80
                targetPort: 80
                protocol: TCP
              - name: https
                port: 443
                targetPort: 443
                protocol: TCP
            selector:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx

    - name: Install Nginx Ingress
      become: yes
      become_user: centos
      shell: kubectl apply -f /etc/kubernetes/nginx-ingress.yml > nginx-ingress.txt
      args:
        chdir: $HOME
        creates: nginx-ingress.txt

    - name: Create clusterRole crd-admin file
      copy:
        dest: /etc/kubernetes/crd-admin.yml
        content: |
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: crd-admin
          rules:
          - apiGroups: ["apiextensions.k8s.io"]
            resources: ["customresourcedefinitions"]
            verbs: ["*"]

    - name: Add clusterRole crd-admin
      become: yes
      become_user: centos
      shell: kubectl apply -f /etc/kubernetes/crd-admin.yml > crd-admin.txt
      args:
        chdir: $HOME
        creates: crd-admin.txt
